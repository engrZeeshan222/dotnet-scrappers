
//list of key components of recursive functions:

//Base Case
//Recursive Case
//Parameters
//Return Statement
//Control Flow


// See https://aka.ms/new-console-template for more information
Console.WriteLine("Hello, World!");
int Factorial(int n)
{
    // Base case: if n is 0 or 1, return 1
    if (n == 0 || n == 1)
        return 1; 

    // Recursive case: n * factorial of (n-1)
    return n * Factorial(n - 1);
}


void MainCall()
{
    List<int> list = new List<int>() { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28 };
    foreach (int i in list)
    {
        Console.WriteLine(i);
        int number = 99999999;
        //Console.WriteLine($"Sum of digits of {number} is {SumOfDigits(number)}");
        //Console.WriteLine($"Sum of digits of {number} is {Power(2, 5)}");
        //var data = ReverseString("Zeeshan");
        int n = 10;
        Console.WriteLine($"Fibonacci number at position {n} is {Fibonacci(n)}");
    }
}

// Recursive function to calculate sum of digits
int SumOfDigits(int n)
{
    if (n == 0)
    {

        Console.WriteLine("x");
        return 0;
    }
    else
    {

        Console.WriteLine("y");
        return n % 10 + SumOfDigits(n / 10);
    }
}


// Recursive function to calculate power
int Power(int baseNum, int exponent)
{
    if (exponent == 0)
        return 1;
    else
        return baseNum * Power(baseNum, exponent - 1);
}


// Recursive function to reverse a string
string ReverseString(string str)
{
    if (str.Length <= 1)
        return str;
    else
        return ReverseString(str.Substring(1)) + str[0];
}


// Recursive function to calculate Fibonacci number
int Fibonacci(int n)
{
    if (n <= 1)
        return n;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
}

//var data = Factorial(5);
MainCall();
//Console.WriteLine(data);
Console.ReadLine();
